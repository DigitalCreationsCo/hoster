name: Build and deploy Python app to Azure Web App - hoster

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
jobs:
  build-backend:
    runs-on: ubuntu-latest
    outputs:
      AZURE_STORAGE_ACCOUNT_NAME: ${{ steps.setvars.outputs.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_ACCOUNT_KEY: ${{ steps.setvars.outputs.AZURE_STORAGE_ACCOUNT_KEY }}
      BACKEND_URL: ${{ steps.setvars.outputs.BACKEND_URL }}

    steps:
      - uses: actions/checkout@v4

      # Create and start virtual environment
      - name: Create and start virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate

      # Install dependencies (this is where the actual installation happens)
      - name: Install dependencies
        run: |
          source .venv/bin/activate
          pip install -r requirements-prod.txt
          pip install azure-cli
          pip install azure-identity azure-keyvault-secrets

      # Cache virtual environment (after installation)
      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv  # Cache the virtual environment after dependencies have been installed
          key: ${{ runner.os }}-python-${{ hashFiles('requirements-prod.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      # Authenticate with Azure using service principal
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
     
      - name: Set Azure environmental variables
        run: |
          echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "AZURE_CREDENTIALS=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV

      # - name: Fetch secrets from Azure Key Vault
      #   continue-on-error: false
      #   run: |
      #     echo "POSTGRES_PASSWORD=$(az keyvault secret show --name PGPW --vault-name hoster-secrets --query value -o tsv)" >> $GITHUB_ENV
      #     echo "POSTGRES_DB=$(az keyvault secret show --name PGDB --vault-name hoster-secrets --query value -o tsv)" >> $GITHUB_ENV
      #     echo "POSTGRES_HOST=$(az keyvault secret show --name PGH --vault-name hoster-secrets --query value -o tsv)" >> $GITHUB_ENV
      #     echo "POSTGRES_PORT=$(az keyvault secret show --name PGPORT --vault-name hoster-secrets --query value -o tsv)" >> $GITHUB_ENV
      #     echo "POSTGRES_SSL=$(az keyvault secret show --name PGSSL --vault-name hoster-secrets --query value -o tsv)" >> $GITHUB_ENV
      #     echo "POSTGRES_USER=$(az keyvault secret show --name PGUSER --vault-name hoster-secrets --query value -o tsv)" >> $GITHUB_ENV
      #     echo "AZURE_STORAGE_CONNECTION_STRING=$(az keyvault secret show --name PGUSER --vault-name hoster-secrets --query value -o tsv)" >> $GITHUB_ENV
          
      - name: Get Azure Key Vault Secrets
        uses: azure/get-keyvault-secrets@v1
        with:
          keyvault: "hoster-secrets"
          secrets: 'PGPW, PGDB, PGH, PGPORT, PGSSL, PGUSER, STORAGE'
        id: getazuresecrets

      # Run the create-prod-env.py script to generate .env.production file
      - name: Create production environment file
        run: |
          python scripts/create-prod-env.py

      - name: Set environment variables
        run: |
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done < .env.production
          echo "POSTGRES_PASSWORD=${{ steps.getazuresecrets.outputs.PGPW }}" >> $GITHUB_ENV
          echo "POSTGRES_DB=${{ steps.getazuresecrets.outputs.PGDB }}" >> $GITHUB_ENV
          echo "POSTGRES_HOST=${{ steps.getazuresecrets.outputs.PGH }}" >> $GITHUB_ENV
          echo "POSTGRES_PORT=${{ steps.getazuresecrets.outputs.PGPORT }}" >> $GITHUB_ENV
          echo "POSTGRES_SSL=${{ steps.getazuresecrets.outputs.PGSSL }}" >> $GITHUB_ENV
          echo "POSTGRES_USER=${{ steps.getazuresecrets.outputs.PGUSER }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_CONNECTION_STRING=${{ steps.getazuresecrets.outputs.STORAGE }}" >> $GITHUB_ENV

      - name: Output shared variables
        id: setvars
        run: |
          STORAGE_ACCOUNT=$(az storage account list --query '[0].name' -o tsv)
          if [ -z "$STORAGE_ACCOUNT" ]; then
            echo "Error: STORAGE_ACCOUNT is empty or not found."
            exit 1
          else
            echo "STORAGE_ACCOUNT: $STORAGE_ACCOUNT"
          fi
          STORAGE_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT} --resource-group 'hoster' --query '[0].value' -o tsv)
          if [ -z "$STORAGE_KEY" ]; then
            echo "Error: STORAGE_KEY is empty or not found."
            exit 1
          else
            echo "STORAGE_KEY: $STORAGE_KEY"
          fi
          echo "AZURE_STORAGE_ACCOUNT_NAME=${STORAGE_ACCOUNT}" >> $GITHUB_OUTPUT
          echo "AZURE_STORAGE_ACCOUNT_KEY=${STORAGE_KEY}" >> $GITHUB_OUTPUT
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_OUTPUT
          if [ -z "$BACKEND_URL" ]; then
            echo "Error: BACKEND_URL is empty or not found."
            exit 1
          else
            echo "BACKEND_URL: $BACKEND_URL"
          fi
          echo "WEBSITE_HOSTNAME=$WEBSITE_HOSTNAME" >> $GITHUB_OUTPUT
          if [ -z "$WEBSITE_HOSTNAME" ]; then
            echo "Error: WEBSITE_HOSTNAME is empty or not found."
            exit 1
          else
            echo "WEBSITE_HOSTNAME: $WEBSITE_HOSTNAME"
          fi

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Include additional deployment files
        run: |
          cp .env.production ./.env

      - name: Zip artifact for deployment
        run: |
          echo "Current directory contents:"
          ls -la
          
          echo "Creating deployment package..."
          zip release.zip ./* ./.* -r \
          -x "./.venv/*" \
          -x "./venv/*" \
          -x "./frontend/*" \
          -x "./.env.production/*" \
          -x "./entrypoint.sh" \
          -x "./infra/*" \
          -x "./node_modules/*" \
          -x "./.git/*" \
          -x "./__pycache__/*" \
          -x "./*.pyc" \
          -x "./tests/*"
          
          # echo "Final zip contents:"
          # unzip -l release.zip | grep -i ".venv"
          # echo "Full zip contents:"
          # unzip -l release.zip
          echo "check created zip:"
          ls

      - name: Check deployment package size
        run: ls -lh release.zip

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: |
            release.zip
            entrypoint.sh
            .env

  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      
      - name: Set frontend environment variables
        run: |
          echo "VITE_BACKEND_URL=${{ needs.build-backend.outputs.BACKEND_URL }}" >> $GITHUB_ENV
          echo "WEBSITE_HOSTNAME=${{ needs.build-backend.outputs.WEBSITE_HOSTNAME }}" >> $GITHUB_ENV

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend bundle
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: frontend/dist

  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    environment:
      name: 'Production'
      url: ${{ steps.deploy-backend.outputs.webapp-url }}
    
    steps:
      # - name: Set environment variables
      #   run: |
      #     export "AZURE_STORAGE_ACCOUNT_NAME=${{ needs.build-backend.outputs.AZURE_STORAGE_ACCOUNT_NAME }}" 
      #     echo "AZURE_STORAGE_ACCOUNT_NAME=$AZURE_STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
      #     if [ -z "$AZURE_STORAGE_ACCOUNT_NAME" ]; then
      #       echo "Error: AZURE_STORAGE_ACCOUNT_NAME is empty or not found."
      #       exit 1
      #     else
      #       echo "AZURE_STORAGE_ACCOUNT_NAME: $AZURE_STORAGE_ACCOUNT_NAME"
      #     fi
      #     export "AZURE_STORAGE_ACCOUNT_KEY=${{ needs.build-backend.outputs.AZURE_STORAGE_ACCOUNT_KEY }}"
      #     echo "AZURE_STORAGE_ACCOUNT_KEY=$AZURE_STORAGE_ACCOUNT_KEY" >> $GITHUB_ENV
      #     if [ -z "$AZURE_STORAGE_ACCOUNT_KEY" ]; then
      #       echo "Error: AZURE_STORAGE_ACCOUNT_KEY is empty or not found."
      #       exit 1
      #     else
      #       echo "AZURE_STORAGE_ACCOUNT_KEY: $AZURE_STORAGE_ACCOUNT_KEY"
      #     fi
      
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Output shared variables
        id: setvars
        run: |
          STORAGE_ACCOUNT=$(az storage account list --query '[0].name' -o tsv)
          if [ -z "$STORAGE_ACCOUNT" ]; then
            echo "Error: STORAGE_ACCOUNT is empty or not found."
            exit 1
          else
            echo "STORAGE_ACCOUNT: $STORAGE_ACCOUNT"
          fi
          STORAGE_KEY=$(az storage account keys list --account-name ${STORAGE_ACCOUNT} --resource-group 'hoster' --query '[0].value' -o tsv)
          if [ -z "$STORAGE_KEY" ]; then
            echo "Error: STORAGE_KEY is empty or not found."
            exit 1
          else
            echo "STORAGE_KEY: $STORAGE_KEY"
          fi
          echo "AZURE_STORAGE_ACCOUNT_NAME=${STORAGE_ACCOUNT}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_ACCOUNT_KEY=${STORAGE_KEY}" >> $GITHUB_ENV

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend


      # - name: Verify App Service existence
      #   run: |
      #     az webapp show --name hoster --resource-group hoster
    
      - name: Unzip backend artifact
        run: unzip release.zip

      - name: Set execute permissions for entrypoint
        run: chmod +x entrypoint.sh

      - name: Set startup command
        run: |
          az webapp config set \
            --resource-group hoster \
            --name hoster \
            --startup-file "entrypoint.sh"
            
      - name: Deploy backend to Azure Web App
        uses: azure/webapps-deploy@v3
        id: deploy-backend
        with:
          app-name: 'hoster'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
          package: '.'
          verbose: true

      - name: Ensure frontend/dist directory exists
        run: mkdir -p frontend/dist

      # Deploy frontend
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: frontend/dist
     
      - name: Verify frontend artifact
        run: |
          echo "Verify frontend artifact"
          ls -la

      - name: Upload frontend to Azure Blob Storage
        run: |
          az storage blob upload-batch \
            --account-name $AZURE_STORAGE_ACCOUNT_NAME \
            --account-key $AZURE_STORAGE_ACCOUNT_KEY \
            --destination '$web' \
            --source frontend/dist

      - name: Verify deployment
        run: |
          echo "Backend URL: ${{ steps.deploy-backend.outputs.webapp-url }}"
          echo "Frontend URL : https://${AZURE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net"
